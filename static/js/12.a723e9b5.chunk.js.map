{"version":3,"file":"static/js/12.a723e9b5.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/isMobile/isMobileHomePage.js","components/pages/ProjectsPage/ProjectsPage.js","hooks/http.hook.js","services/MrPanchoService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit:'contain', margin: '0 auto'}} src={img} alt=\"Error\"/>\n    //    <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"Error\" />  - если надо взять из папки public \n    ) \n}\n\nexport default ErrorMessage;","import { useMediaQuery } from 'react-responsive';\nconst IsMobileHomePage = () => {\n    const isMobile = useMediaQuery({ query: `(max-width: 575px)` });\n    if (isMobile) {\n        const overFlow = document.getElementById('burger-checkbox');\n        const close = document.querySelector('.menu-list');\n        const menu = document.querySelector('.menu');\n        const menuItem = document.querySelectorAll('.menu-item');\n        const burger = document.querySelector('.burger');\n        // Закрытие-открытие бургер меню по нажатию на сам бургер\n        overFlow.addEventListener('click', () => {\n            if (overFlow.checked) {\n                document.body.style.overflow = \"hidden\";\n                menu.style = `\n                 position: fixed;\n                 top: 0;\n                 left: 0;\n                 width: 100%;\n                 height: 100%;\n                 z-index: 1;\n                 background-color: rgba(0, 0, 0, 0.5);\n                   `\n                close.style = `\n                display: grid;\n                `\n                burger.style = `\n                left: 85%;\n                z-index: 5;\n                `\n             } else {\n                document.body.style.overflow = \"\";\n                menu.style = ``;\n                close.style = ``;\n                burger.style = ``;\n             }\n        })\n        // Закрытие бургер меню по нажатию на поле вне зоны бургер меню\n       window.addEventListener('click', (e) => {\n        if (e.target === menu && overFlow.checked === true ) {\n            overFlow.checked = false;\n            document.body.style.overflow = \"\";\n            menu.style = ``;\n            close.style = ``;\n            burger.style = ``;\n        }\n       });\n         // Закрытие бургер меню по нажатию на навигационный элемент (ссылку страницу) \n       Array.from(menuItem).forEach(item => {\n            item.addEventListener('click', () => {\n                overFlow.checked = false;\n                document.body.style.overflow = \"\";\n                menu.style = ``;\n                close.style = ``;\n                burger.style = ``;\n            });\n       });\n    }\n  \n\n   \n}\nexport default IsMobileHomePage;\n","import { useState, useEffect, useMemo} from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport '../../../style/style.scss';\nimport './projectsPage.scss';\nimport {Link} from 'react-router-dom'\nimport useMrPanchoService from \"../../../services/MrPanchoService\";\nimport * as resources from '../../../resources';\nimport Spinner from \"../../spinner/Spinner\";\nimport ErrorMessage from \"../../errorMessage/ErrorMessage\";\nimport IsMobileHomePage from \"../../isMobile/isMobileHomePage\";\n\n// {bringitup, marvelLogo, mogo, nativeJs}\n// const setContent = (process, Component, newItemLoading) => {\n//     switch (process) {\n//         case 'waiting':\n//             return <Spinner/>;\n//         case 'loading':\n//             return newItemLoading ? <Component/> : <Spinner/>;\n//         case 'confirmed':\n//             return Component;\n//         case 'error':\n//             return <ErrorMessage/>;\n//         default:\n//             throw new Error('Unexpected process state');\n//     }\n// }\n\nconst ProjectPage = () => {\n    const [data, setData] = useState([]);\n    \n    IsMobileHomePage();\n  \n    console.log('render-PROJECTS');\n    const {getdata, process, setProcess} =  useMrPanchoService();\n    useEffect(() => {\n        // 'https://projectdata-f0pl.onrender.com/cards'\n        // 'http://localhost:3000/cards'\n        getdata('https://projectdata-f0pl.onrender.com/cards').then(onLoaded).then(() => setProcess('confirmed'))\n    }, [])\n   \n    const onLoaded = (list) => {\n        setData(list);  \n    }\n    \n    function renderCards() {\n     const rez = data.map((item, index) => {\n        function photo() {\n            let it;\n            Object.entries(resources).forEach(logo => {\n                if (logo[0] === item.img) it = logo[1];\n               });\n               return it;\n            } \n            const ulCardlist = item.technologyStack.map((item, index) => {\n               return (\n                <li key={index}>{item}</li>\n               )\n            })\n            const ulMainFeatures = item.mainFeatures.map((item, index)=> {\n                return (\n                 <li key={index}>{item}</li>\n                )\n             })\n            return (\n            <div key={index} className=\"ProjectPage_wrap\">\n                <div className=\"ProjectPage_card\">\n                <div className=\"Card_imageContainer\">\n                    {/* <img src={photo(logo)} style={{width: '300px', height: '150px' }} alt=\"marvelLogo\" /> */}\n                    <div className=\"Card_image\" style={{backgroundImage: `url(${photo()})`}}></div>\n                </div>\n                <div className=\"Card_content_bg\">\n                    <div className=\"Card_content\">\n                        <h2 className=\"Card_projectName\">{item.projectName}</h2>\n                        <div className=\"Card_listContainer\">\n                            <div className=\"Card_technologyStack\">\n                                <p>Technology stack:</p>\n                                <ul className=\"Card_list\">\n                                    {ulCardlist}\n                                </ul>\n                            </div>\n                            <div className=\"Card_mainFeatures\">\n                                <p>Main Features:</p>\n                                <ul className=\"Card_list\">\n                                   {ulMainFeatures}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"Card_btnContainer\">\n                        <Link className=\"d-flex justify-content-center btn btn-primary\" to={item.linkWebsite}>Go to the website</Link>\n                        <br/>\n                        <Link className=\"d-flex justify-content-center btn btn-primary\" to={item.linkGitHubRepo}>GitHub repo</Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n            ) \n        });\n        return (\n            rez\n            )  \n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Pavel Portfolio\"\n                />\n                <title>Pavel Portfolio</title>\n            </Helmet>\n            <div className=\"ProjectPage\">\n                <div className=\"ProjectPage_bg\">\n                    <h1> My projects </h1>\n                    <div className=\"ProjectPage_container\">\n                    {renderCards()}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default ProjectPage;\n\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {\n        'Content-Type': 'application/json'\n        }) => {\n        setProcess('loading');\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n    \n    return { request, clearError, process, setProcess}\n}\n\n","import {useHttp} from \"../hooks/http.hook\";\n\nconst  useMrPanchoService = () => {\n    const { request, clearError, process, setProcess} = useHttp();\n\n    // const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    // const _apiKey = 'apikey=1f77ab1b7a55db4504a75980239d5ccb';\n    // const _baseOffset = 210;\n\n    // const getAllCharacters = async (offset = _baseOffset) => {\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    //     return res.data.results.map(_transformCharacter);\n    // }\n\n    // const getCharacterByName = async (name) => {\n\t// \tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t// \treturn res.data.results.map(_transformCharacter);\n\t// };\n\n    const getdata = async (url) => {\n        const res = await request(`${url}`);\n        return res;\n    }\n\n    // const getAllComics = async (offset = 0) => {\n    //     const res = await request(`${_apiBase}comics?issueNumber=1&limit=8&offset=${offset}&${_apiKey}`);\n    //     return res.data.results.map(_transformComics);\n    //  }\n\n    //  const getComic = async (id) => {\n    //     const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    //     return _transformComics(res.data.results[0]);\n    //  };\n\n//    const _transformCharacter = (char) => {\n//         return {\n//             id: char.id,\n//             name: char.name,\n//             description: char.description  \n//                     ? `${char.description.slice(0, 210)}...` \n//                     : 'There is no description for this character',\n//             thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n//             homepage: char.urls[0].url,\n//             wiki: char.urls[1].url,\n//             comics: char.comics.items\n//         }\n//     }\n\n//     const _transformComics = (comics) => {\n//         return {\n//             id: comics.id,\n//             title: comics.title,\n//             description: comics.description || \"There is no description\",\n//             pageCount: comics.pageCount\n//                     ? `${comics.pageCount} p.`\n//                     : \"No information about the number of pages\",\n//             thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n//             language: comics.textObjects[0]?.language || \"en-us\",\n//             price: comics.prices[0].price\n//                     ? `${comics.prices[0].price}$`\n//                     : 'not available'\n//         };\n//     };\n\n    return {\n        clearError, \n        process, \n        setProcess,\n        getdata\n    }\n}\n\nexport default useMrPanchoService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","IsMobileHomePage","useMediaQuery","query","overFlow","document","getElementById","close","querySelector","menu","menuItem","querySelectorAll","burger","addEventListener","checked","body","overflow","window","e","target","Array","from","forEach","item","ProjectPage","data","setData","useState","console","log","getdata","process","setProcess","useMrPanchoService","useEffect","then","onLoaded","list","_jsxs","_Fragment","children","Helmet","name","content","className","map","index","ulCardlist","technologyStack","ulMainFeatures","mainFeatures","backgroundImage","concat","it","Object","entries","resources","logo","photo","projectName","Link","to","linkWebsite","linkGitHubRepo","request","clearError","useHttp","useCallback","async","url","method","arguments","length","undefined","headers","response","fetch","ok","Error","status","json"],"sourceRoot":""}