{"version":3,"file":"static/js/116.767c99de.chunk.js","mappings":"kIACA,MA4DA,EA5DyBA,KAErB,IADiBC,EAAAA,EAAAA,eAAc,CAAEC,MAAM,uBACzB,CACV,MAAMC,EAAWC,SAASC,eAAe,mBACnCC,EAAQF,SAASG,cAAc,cAC/BC,EAAOJ,SAASG,cAAc,SAC9BE,EAAWL,SAASM,iBAAiB,cACrCC,EAASP,SAASG,cAAc,WAEtCJ,EAASS,iBAAiB,SAAS,KAC3BT,EAASU,SACTT,SAASU,KAAKC,MAAMC,SAAW,SAC/BR,EAAKO,MAAK,qQASVT,EAAMS,MAAK,qDAGXJ,EAAOI,MAAK,gFAKZX,SAASU,KAAKC,MAAMC,SAAW,GAC/BR,EAAKO,MAAK,GACVT,EAAMS,MAAK,GACXJ,EAAOI,MAAK,GACf,IAGNE,OAAOL,iBAAiB,SAAUM,IAC7BA,EAAEC,SAAWX,IAA6B,IAArBL,EAASU,UAC9BV,EAASU,SAAU,EACnBT,SAASU,KAAKC,MAAMC,SAAW,GAC/BR,EAAKO,MAAK,GACVT,EAAMS,MAAK,GACXJ,EAAOI,MAAK,GAChB,IAGDK,MAAMC,KAAKZ,GAAUa,SAAQC,IACxBA,EAAKX,iBAAiB,SAAS,KAC3BT,EAASU,SAAU,EACnBT,SAASU,KAAKC,MAAMC,SAAW,GAC/BR,EAAKO,MAAK,GACVT,EAAMS,MAAK,GACXJ,EAAOI,MAAK,EAAK,GACnB,GAEV,E,khoBCtDG,MCsEP,EAtE4BS,KACxB,MAAM,QAAEC,EAAO,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GDDnBC,MACnB,MAAOF,EAASC,IAAcE,EAAAA,EAAAA,UAAS,WAsBvC,MAAO,CAAEL,SArBOM,EAAAA,EAAAA,cAAYC,eAAOC,GAExB,IAF6BC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOrB,EAAIqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMG,EAAOH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAC3E,eAAgB,oBAEhBP,EAAW,WACX,IACI,MAAMW,QAAiBC,MAAMP,EAAK,CAACC,SAAQpB,OAAMwB,YACjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBV,EAAG,cAAAU,OAAaJ,EAASK,SAGhE,aADmBL,EAASM,MAEhC,CAAE,MAAM3B,GAEJ,MADAU,EAAW,SACLV,CACV,CACJ,GAAG,IAMeQ,YAJCK,EAAAA,EAAAA,cAAY,KAC3BH,EAAW,UAAU,GACtB,IAE2BD,UAASC,aAAW,ECtBEC,GA6DpD,MAAO,CACHH,aACAC,UACAC,aACAkB,QAjDYd,eACMP,EAAQ,GAADkB,OAAIV,IAiDhC,C","sources":["components/isMobile/isMobileHomePage.js","hooks/http.hook.js","services/MrPanchoService.js"],"sourcesContent":["import { useMediaQuery } from 'react-responsive';\nconst IsMobileHomePage = () => {\n    const isMobile = useMediaQuery({ query: `(max-width: 575px)` });\n    if (isMobile) {\n        const overFlow = document.getElementById('burger-checkbox');\n        const close = document.querySelector('.menu-list');\n        const menu = document.querySelector('.menu');\n        const menuItem = document.querySelectorAll('.menu-item');\n        const burger = document.querySelector('.burger');\n        // Закрытие-открытие бургер меню по нажатию на сам бургер\n        overFlow.addEventListener('click', () => {\n            if (overFlow.checked) {\n                document.body.style.overflow = \"hidden\";\n                menu.style = `\n                 position: fixed;\n                 top: 0;\n                 left: 0;\n                 width: 100%;\n                 height: 100%;\n                 z-index: 1;\n                 background-color: rgba(0, 0, 0, 0.5);\n                   `\n                close.style = `\n                display: grid;\n                `\n                burger.style = `\n                left: 85%;\n                z-index: 5;\n                `\n             } else {\n                document.body.style.overflow = \"\";\n                menu.style = ``;\n                close.style = ``;\n                burger.style = ``;\n             }\n        })\n        // Закрытие бургер меню по нажатию на поле вне зоны бургер меню\n       window.addEventListener('click', (e) => {\n        if (e.target === menu && overFlow.checked === true ) {\n            overFlow.checked = false;\n            document.body.style.overflow = \"\";\n            menu.style = ``;\n            close.style = ``;\n            burger.style = ``;\n        }\n       });\n         // Закрытие бургер меню по нажатию на навигационный элемент (ссылку страницу) \n       Array.from(menuItem).forEach(item => {\n            item.addEventListener('click', () => {\n                overFlow.checked = false;\n                document.body.style.overflow = \"\";\n                menu.style = ``;\n                close.style = ``;\n                burger.style = ``;\n            });\n       });\n    }\n  \n\n   \n}\nexport default IsMobileHomePage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {\n        'Content-Type': 'application/json'\n        }) => {\n        setProcess('loading');\n        try {\n            const response = await fetch(url, {method, body, headers});\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n            const data = await response.json();\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n    \n    return { request, clearError, process, setProcess}\n}\n\n","import {useHttp} from \"../hooks/http.hook\";\n\nconst  useMrPanchoService = () => {\n    const { request, clearError, process, setProcess} = useHttp();\n\n    // const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    // const _apiKey = 'apikey=1f77ab1b7a55db4504a75980239d5ccb';\n    // const _baseOffset = 210;\n\n    // const getAllCharacters = async (offset = _baseOffset) => {\n    //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    //     return res.data.results.map(_transformCharacter);\n    // }\n\n    // const getCharacterByName = async (name) => {\n\t// \tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t// \treturn res.data.results.map(_transformCharacter);\n\t// };\n\n    const getdata = async (url) => {\n        const res = await request(`${url}`);\n        return res;\n    }\n\n    // const getAllComics = async (offset = 0) => {\n    //     const res = await request(`${_apiBase}comics?issueNumber=1&limit=8&offset=${offset}&${_apiKey}`);\n    //     return res.data.results.map(_transformComics);\n    //  }\n\n    //  const getComic = async (id) => {\n    //     const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    //     return _transformComics(res.data.results[0]);\n    //  };\n\n//    const _transformCharacter = (char) => {\n//         return {\n//             id: char.id,\n//             name: char.name,\n//             description: char.description  \n//                     ? `${char.description.slice(0, 210)}...` \n//                     : 'There is no description for this character',\n//             thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n//             homepage: char.urls[0].url,\n//             wiki: char.urls[1].url,\n//             comics: char.comics.items\n//         }\n//     }\n\n//     const _transformComics = (comics) => {\n//         return {\n//             id: comics.id,\n//             title: comics.title,\n//             description: comics.description || \"There is no description\",\n//             pageCount: comics.pageCount\n//                     ? `${comics.pageCount} p.`\n//                     : \"No information about the number of pages\",\n//             thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n//             language: comics.textObjects[0]?.language || \"en-us\",\n//             price: comics.prices[0].price\n//                     ? `${comics.prices[0].price}$`\n//                     : 'not available'\n//         };\n//     };\n\n    return {\n        clearError, \n        process, \n        setProcess,\n        getdata\n    }\n}\n\nexport default useMrPanchoService;\n"],"names":["IsMobileHomePage","useMediaQuery","query","overFlow","document","getElementById","close","querySelector","menu","menuItem","querySelectorAll","burger","addEventListener","checked","body","style","overflow","window","e","target","Array","from","forEach","item","useMrPanchoService","request","clearError","process","setProcess","useHttp","useState","useCallback","async","url","method","arguments","length","undefined","headers","response","fetch","ok","Error","concat","status","json","getdata"],"sourceRoot":""}