{"version":3,"file":"static/js/900.cf35102d.chunk.js","mappings":"sNA0BA,MA+GA,EA/GoBA,MAGhBC,EAAAA,EAAAA,KACAC,aAAaC,QAAQ,OAAQ,WAE7BC,QAAQC,IAAI,oBA8ERC,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACPC,SAAUC,EAAAA,EACVC,QAAQ,SACRC,QAAQ,UACRC,KAAK,OACLC,UAAU,cAAaC,SAAA,EAEvBC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,CAAAF,UACXT,EAAAA,EAAAA,MAACY,EAAAA,GAAM,CAAAH,SAAA,EACHC,EAAAA,EAAAA,KAAA,QACIG,KAAK,cACLC,QAAQ,qBAEZJ,EAAAA,EAAAA,KAAA,SAAAD,SAAO,0BAGfC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UACxBT,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,iBAAgBC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,SApFzCM,EAAAA,EAAY,GAAGC,MAAMC,KAAI,CAACC,EAAMC,KAQrC,MAAMC,EAAaF,EAAKG,gBAAgBJ,KAAI,CAACC,EAAMC,KAE/CT,EAAAA,EAAAA,KAAA,MAAAD,SAAiBS,GAARC,KAGPG,EAAiBJ,EAAKK,aAAaN,KAAI,CAACC,EAAMC,KAE/CT,EAAAA,EAAAA,KAAA,MAAAD,SAAiBS,GAARC,KAGb,IAAIK,EAAc,GAMnB,OAFIA,EAHEN,EAAKO,YAGO,gDAFA,wDAKlBf,EAAAA,EAAAA,KAAA,OAAiBF,UAAU,mBAAkBC,UACzCT,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,mBAAkBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAEhCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAakB,MAAO,CAACC,gBAAgB,OAADC,OA5B/D,WACI,IAAIC,EAID,OAHHC,OAAOC,QAAQC,GAAWC,SAAQC,IAC1BA,EAAK,KAAOhB,EAAKiB,MAAKN,EAAKK,EAAK,GAAE,IAEhCL,CACV,CAsBoEO,GAAO,WAEvEpC,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,kBAAiBC,SAAA,EAC5BT,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mBAAkBC,SAAES,EAAKmB,eACvCrC,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,qBAAoBC,SAAA,EAC/BT,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,uBAAsBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBACHC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SACpBW,QAGTpB,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBACHC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SACrBa,cAKhBtB,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,oBAAmBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,KAAGF,UAAWgB,EAAac,KAAMpB,EAAKO,YAAac,OAAO,QAAO9B,SAAE,uBACnEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gDAAgD8B,KAAMpB,EAAKsB,eAAgBD,OAAO,QAAO9B,SAAC,0BA3BzGU,EA+BR,c","sources":["components/pages/ProjectsPage/ProjectsPage.js"],"sourcesContent":["import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport '../../../style/style.scss';\nimport './projectsPage.scss';\nimport ProjectData from '../../../Assets/projectData/projectData';\nimport * as resources from '../../../resources';\nimport IsMobilePage from \"../../isMobile/isMobilePage\";\nimport {defaultSlide} from \"../../../FramerMotion/framerMotion.pages.configs\";\nimport { motion } from 'framer-motion';\n\n\n// {bringitup, marvelLogo, mogo, nativeJs}\n// const setContent = (process, Component, newItemLoading) => {\n//     switch (process) {\n//         case 'waiting':\n//             return <Spinner/>;\n//         case 'loading':\n//             return newItemLoading ? <Component/> : <Spinner/>;\n//         case 'confirmed':\n//             return Component;\n//         case 'error':\n//             return <ErrorMessage/>;\n//         default:\n//             throw new Error('Unexpected process state');\n//     }\n// }\n\nconst ProjectPage = () => {\n    // const [data, setData] = useState([]);\n    \n    IsMobilePage();\n    localStorage.setItem('page', 'project');\n\n    console.log('render-PROJECTS');\n    // const {getdata, process, setProcess} =  useMrPanchoService();\n    // useEffect(() => {\n        // 'https://projectdata-f0pl.onrender.com/cards'\n        // 'http://localhost:3000/cards'\n        // getdata('../../../Assets/db.json').then(onLoaded).then(() => setProcess('confirmed'))\n\n    // }, [])\n    // const onLoaded = (list) => {\n    //     setData(list);  \n    // }\n   \n    function renderCards() {\n     const rez = ProjectData[0].cards.map((item, index) => {\n        function photo() {\n            let it;\n            Object.entries(resources).forEach(logo => {\n                if (logo[0] === item.img) it = logo[1];\n               });\n               return it;\n            } \n            const ulCardlist = item.technologyStack.map((item, index) => {\n               return (\n                <li key={index}>{item}</li>\n               )\n            })\n            const ulMainFeatures = item.mainFeatures.map((item, index)=> {\n                return (\n                 <li key={index}>{item}</li>\n                )\n             })\n             let buttonClass = '';\n             if (!item.linkWebsite) {\n                buttonClass = \"d-flex justify-content-center btn btn-primary d-none\";\n             } else {\n                buttonClass = \"d-flex justify-content-center btn btn-primary\";\n             }\n            return (\n            <div key={index} className=\"ProjectPage_wrap\">\n                <div className=\"ProjectPage_card\">\n                <div className=\"Card_imageContainer\">\n                    {/* <img src={photo(logo)} style={{width: '300px', height: '150px' }} alt=\"marvelLogo\" /> */}\n                    <div className=\"Card_image\" style={{backgroundImage: `url(${photo()})`}}></div>\n                </div>\n                <div className=\"Card_content_bg\">\n                    <div className=\"Card_content\">\n                        <h2 className=\"Card_projectName\">{item.projectName}</h2>\n                        <div className=\"Card_listContainer\">\n                            <div className=\"Card_technologyStack\">\n                                <p>Technology stack:</p>\n                                <ul className=\"Card_list\">\n                                    {ulCardlist}\n                                </ul>\n                            </div>\n                            <div className=\"Card_mainFeatures\">\n                                <p>Main Features:</p>\n                                <ul className=\"Card_list\">\n                                   {ulMainFeatures}\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"Card_btnContainer\">\n                        <a className={buttonClass} href={item.linkWebsite} target=\"blank\" >Go to the website</a>\n                        <br/>\n                        <a className=\"d-flex justify-content-center btn btn-primary\" href={item.linkGitHubRepo} target=\"blank\">GitHub repo</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n            ) \n        });\n        return (\n            rez\n            )  \n    }\n\n    return (\n        <motion.div\n            variants={defaultSlide}\n            initial='hidden'\n            animate='visible'\n            exit='exit'\n            className='ProjectPage'\n        >\n            <HelmetProvider>\n                <Helmet>\n                    <meta\n                        name=\"description\"\n                        content=\"Pavel Portfolio\"\n                    />\n                    <title>Pavel Portfolio</title>\n                </Helmet>\n            </HelmetProvider>\n            <div className=\"ProjectPage\">\n                <div className=\"ProjectPage_bg\">\n                    <h1> My projects </h1>\n                    <div className=\"ProjectPage_container\">\n                    {renderCards()}\n                    </div>\n                </div>\n            </div>\n        </motion.div>\n    )\n}\nexport default ProjectPage;\n\n"],"names":["ProjectPage","IsMobilePage","localStorage","setItem","console","log","_jsxs","motion","div","variants","defaultSlide","initial","animate","exit","className","children","_jsx","HelmetProvider","Helmet","name","content","ProjectData","cards","map","item","index","ulCardlist","technologyStack","ulMainFeatures","mainFeatures","buttonClass","linkWebsite","style","backgroundImage","concat","it","Object","entries","resources","forEach","logo","img","photo","projectName","href","target","linkGitHubRepo"],"sourceRoot":""}